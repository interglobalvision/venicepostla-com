{"version":3,"sources":["lazysizes.js","howler.js"],"names":["window","factory","lazySizes","document","getElementsByClassName","lazySizesConfig","docElem","documentElement","Date","supportPicture","HTMLPictureElement","addEventListener","setTimeout","requestAnimationFrame","requestIdleCallback","regPicture","loadEvents","regClassCache","forEach","Array","prototype","hasClass","ele","cls","RegExp","test","addClass","setAttribute","trim","removeClass","reg","replace","addRemoveLoadEvents","dom","fn","add","action","evt","triggerEvent","elem","name","detail","noBubbles","noCancelable","event","createEvent","initCustomEvent","dispatchEvent","updatePolyfill","el","full","polyfill","picturefill","pf","reevaluate","elements","src","getCSS","style","getComputedStyle","getWidth","parent","width","offsetWidth","minSize","_lazysizesWidth","parentNode","rAF","running","waiting","fns","run","length","shift","apply","rafBatch","this","arguments","push","hidden","_lsFlush","rAFIt","simple","that","args","throttle","lastTime","rICTimeout","now","idleCallback","timeout","isPriority","delay","debounce","func","timestamp","later","last","loader","lazyloadElems","preloadElems","isCompleted","resetPreloadingTimer","loadMode","started","eLvW","elvH","eLtop","eLleft","eLright","eLbottom","defaultExpand","preloadExpand","hFac","regImg","regIframe","supportScroll","navigator","userAgent","currentExpand","isLoading","lowRuns","resetPreloading","e","target","isNestedVisible","elemExpand","outerRect","visible","body","offsetParent","getBoundingClientRect","left","right","top","bottom","checkElements","eLlen","i","rect","autoLoadElem","loadedSomething","elemNegativeExpand","elemExpandVal","beforeExpandVal","expand","clientHeight","clientWidth","expFactor","_lazyRace","innerWidth","innerHeight","unveilElement","preloadAfterLoad","sizesAttr","throttledCheckElements","switchLoadingClass","loadedClass","loadingClass","rafSwitchLoadingClass","rafedSwitchLoadingClass","changeIframeSrc","contentWindow","location","handleSources","source","customMedia","sourceSrcset","srcsetAttr","insertBefore","cloneNode","removeChild","lazyUnveil","isAuto","sizes","isImg","srcset","isPicture","firesLoad","defaultPrevented","autosizesClass","srcAttr","nodeName","clearTimeout","call","getElementsByTagName","lazyClass","complete","errorClass","autoSizer","updateElem","onload","afterScroll","_","preloadClass","MutationObserver","observe","childList","subtree","attributes","setInterval","readyState","checkElems","unveil","autosizesElems","sizeElement","sources","len","dataAttr","getSizeElement","updateElementsSizes","debouncedUpdateElementsSizes","init","prop","lazySizesDefaults","lazysizesConfig","cfg","uP","aC","rC","hC","fire","gW","module","exports","HowlerGlobal","self","Howler","_counter","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","state","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","_autoResume","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","removeEventListener","_emit","suspend","_sounds","_paused","_suspendTimer","then","_resumeAfterSuspend","Howl","o","console","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","_onfade","onfade","_onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","play","load","url","str","exec","toLowerCase","warn","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","abs","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","Promise","catch","paused","loadedNoReadyState","ejecta","isCocoonJS","listener","pause","_rateSeek","_stopFade","stop","noteOff","_cleanBuffer","isNaN","_interval","indexOf","fade","from","to","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","_fadeTo","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","index","realTime","playing","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","splice","remCache","cache","on","events","off","isId","keys","Object","isArray","msg","task","ended","_drain","reset","limit","cnt","_panner","howl","_parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","define","amd","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"library.min.js","sourcesContent":["(function(window, factory) {\n\tvar lazySizes = factory(window, window.document);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(window, function l(window, document) {\n\t'use strict';\n\t/*jshint eqnull:true */\n\tif(!document.getElementsByClassName){return;}\n\n\tvar lazySizesConfig;\n\n\tvar docElem = document.documentElement;\n\n\tvar Date = window.Date;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\tvar addEventListener = window[_addEventListener];\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('CustomEvent');\n\n\t\tevent.initCustomEvent(name, !noBubbles, !noCancelable, detail || {});\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesConfig.pf) ) ){\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesConfig.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar fns = [];\n\n\t\tvar run = function(){\n\t\t\tvar fn;\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\t\t\twhile(fns.length){\n\t\t\t\tfn = fns.shift();\n\t\t\t\tfn[0].apply(fn[1], fn[2]);\n\t\t\t}\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn){\n\t\t\tif(running){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push([fn, this, arguments]);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = 125;\n\t\tvar RIC_DEFAULT_TIMEOUT = 666;\n\t\tvar rICTimeout = RIC_DEFAULT_TIMEOUT;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\t\t\t\tif(rICTimeout !== RIC_DEFAULT_TIMEOUT){\n\t\t\t\t\trICTimeout = RIC_DEFAULT_TIMEOUT;\n\t\t\t\t}\n\t\t\t}:\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 44;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || (delay < 9 && requestIdleCallback)){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\n\tvar loader = (function(){\n\t\tvar lazyloadElems, preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom;\n\n\t\tvar defaultExpand, preloadExpand, hFac;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/glebot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(e && e.target){\n\t\t\t\taddRemoveLoadEvents(e.target, resetPreloading);\n\t\t\t}\n\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = getCSS(document.body, 'visibility') == 'hidden' || getCSS(elem, 'visibility') != 'hidden';\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal, beforeExpandVal;\n\n\t\t\tif((loadMode = lazySizesConfig.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tif(preloadExpand == null){\n\t\t\t\t\tif(!('expand' in lazySizesConfig)){\n\t\t\t\t\t\tlazySizesConfig.expand = docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefaultExpand = lazySizesConfig.expand;\n\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesConfig.expFactor;\n\t\t\t\t}\n\n\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\tlowRuns = 0;\n\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t}\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesConfig.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesConfig.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\taddClass(e.target, lazySizesConfig.loadedClass);\n\t\t\tremoveClass(e.target, lazySizesConfig.loadingClass);\n\t\t\taddRemoveLoadEvents(e.target, rafSwitchLoadingClass);\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\ttry {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} catch(e){\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia, parent;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesConfig.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesConfig.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\n\t\t\t//https://bugzilla.mozilla.org/show_bug.cgi?id=1170572\n\t\t\tif(customMedia){\n\t\t\t\tparent = source.parentNode;\n\t\t\t\tparent.insertBefore(source.cloneNode(), source);\n\t\t\t\tparent.removeChild(source);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesConfig.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesConfig.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesConfig.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\taddRemoveLoadEvents(elem, resetPreloading, true);\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\n\t\t\t\t\taddClass(elem, lazySizesConfig.loadingClass);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(srcset || isPicture){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trAF(function(){\n\t\t\t\tif(elem._lazyRace){\n\t\t\t\t\tdelete elem._lazyRace;\n\t\t\t\t}\n\t\t\t\tremoveClass(elem, lazySizesConfig.lazyClass);\n\n\t\t\t\tif( !firesLoad || elem.complete ){\n\t\t\t\t\tif(firesLoad){\n\t\t\t\t\t\tresetPreloading(event);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisLoading--;\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tvar unveilElement = function (elem){\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesConfig.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem.src || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesConfig.errorClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar afterScroll = debounce(function(){\n\t\t\t\tlazySizesConfig.loadMode = 3;\n\t\t\t\tthrottledCheckElements();\n\t\t\t});\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesConfig.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', function(){\n\t\t\t\tif(lazySizesConfig.loadMode == 3){\n\t\t\t\t\tlazySizesConfig.loadMode = 2;\n\t\t\t\t}\n\t\t\t\tafterScroll();\n\t\t\t}, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazyloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass + ' ' + lazySizesConfig.preloadClass);\n\t\t\t\thFac = lazySizesConfig.hFac;\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend', 'webkitAnimationEnd'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazyloadElems.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesConfig.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2\n\t\t};\n\n\t\tlazySizesConfig = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesConfig)){\n\t\t\t\tlazySizesConfig[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\n\t\twindow.lazySizesConfig = lazySizesConfig;\n\n\t\tsetTimeout(function(){\n\t\t\tif(lazySizesConfig.init){\n\t\t\t\tinit();\n\t\t\t}\n\t\t});\n\t})();\n\n\treturn {\n\t\tcfg: lazySizesConfig,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n}\n));\n","/*!\n *  howler.js v2.0.15\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome/i.test(self._navigator && self._navigator.userAgent);\n      if (self._mobileEnabled || !self.ctx || !isMobile) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n      self.mobileAutoEnable = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Fix Android can not play in suspend state.\n        Howler._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Makr this sounded as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // End the sound instantly if seek is at the end.\n      if (sound._seek >= sound._stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Mobile browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n                });\n            } else if (!internal) {\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.15\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"]}